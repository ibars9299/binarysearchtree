# Binary Search Tree Aşamaları

Root olarak 7'yi seçelim ve diğer elemanları sırayla ekleyelim:

1. Root: 7

2. 5 < 7, sola yerleşir:
```
    7
   /
  5
```

3. 1 < 7 ve 1 < 5, sola yerleşir:
```
    7
   /
  5
 /
1
```

4. 8 > 7, sağa yerleşir:
```
    7
   / \
  5   8
 /
1
```

5. 3 < 7, 3 < 5, 3 > 1, sağa yerleşir:
```
    7
   / \
  5   8
 /
1
 \
  3
```

6. 6 < 7, 6 > 5, sağa yerleşir:
```
    7
   / \
  5   8
 / \
1   6
 \
  3
```

7. 0 < 7, 0 < 5, 0 < 1, sola yerleşir:
```
     7
   /   \
  5     8
 / \
1   6
/ \
0   3
```

8. 9 > 7, 9 > 8, sağa yerleşir:
```
     7
   /   \
  5     8
 / \     \
1   6     9
/ \
0   3
```

9. 4 < 7, 4 < 5, 4 > 1, 4 > 3, sağa yerleşir:
```
     7
   /   \
  5     8
 / \     \
1   6     9
/ \
0   3
     \
      4
```

10. 2 < 7, 2 < 5, 2 > 1, 2 < 3, sola yerleşir:
```
     7
   /   \
  5     8
 / \     \
1   6     9
/ \
0   3
   /  \
  2    4
```

## Açıklama
- Root olarak 7 seçildi
- Her sayı eklenirken, root'tan başlayarak küçükse sola, büyükse sağa gidilerek uygun pozisyon bulundu
- Final yapıda:
  - Root'un (7) solunda 5, sağında 8 bulunuyor
  - 5'in solunda 1, sağında 6 var
  - 1'in solunda 0, sağında 3 var
  - 3'ün solunda 2, sağında 4 var
  - 8'in sağında 9 var
